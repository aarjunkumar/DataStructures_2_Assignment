# -*- coding: utf-8 -*-
"""Data_Structures.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18SKdYjyU-Us9KExbUjh3MCDfgApEEW86

Q1. Write a code to reverse a string.
"""

s=str(input())
s=s[::-1]
print(s)

"""Q2. Write code to count the number of vowels in string"""

s=str(input())
s=s.lower()
count=0
for i in s:
  if i=='a' or i=='e' or i=='i' or i=='o' or i=='u':
    count+=1

print(count)

"""Q3. Write a code to check if a given string is a palindrome or not."""

s=str(input())
x=s[::-1]
if s==x:
    print("Palindrome")
else:
    print("Not a Palindrome")

"""Q4.  Write a code to check if two given strings are anagrams of each other"""

s=str(input())
x=str(input())

if sorted(s)==sorted(x):
    print("Given strings are Anagrams of each other")
else:
    print("Not an anagram")

"""Q5.  Write a code to find all occurrences of a given substring within another string"""

string = str(input())
substring = str(input())

start=0
occ=[]

while True:
    start=string.find(substring,start)
    if start==-1:
        break
    occ.append(start)
    start+=1

print(occ)

"""Q6. Write a code to perform basic string compression using the counts of repeated characters"""

string=str(input())
r=""

count=1
for i in range(1,len(string)):
    if string[i]==string[i-1]:
        count+=1
    else:
        r+=string[i-1]+str(count)
        count=1
r+=string[i-1]+str(count)
print(r)

"""Q7. Write a code to determine if a string has all unique characters."""

s=str(input())
x=set(s)

if len(s)==len(x):
  print("String has all unique characters")
else:
  print("Not all characters are unique")

"""Q8.  Write a code to convert a given string to uppercase or lowercase"""

s=str(input())

# Converting string to lowercase
s=s.lower()
print("Lowercase:",s)

# converting string to uppercase
s=s.upper()
print("Uppercase:",s)

"""Q9.  Write a code to count the number of words in a string"""

s=str(input())
x=s.split()
print(len(x))

"""Q10. Write a code to concatenate two strings without using the + operator."""

s=str(input())
x=str(input())

r=(" ").join([s,x])
print(r)

"""Q11.  Write a code to remove all occurrences of a specific element from a list."""

s=input("Enter the string").split()
x=str(input("Enter the element which you want to remove"))

c=s.count(x)

for i in range(c):
  s.remove(x)

s

"""Q12.  Implement a code to find the second largest number in a given list of integers"""

s=list(map(int, input().split()))
s.sort()
print(s[-2])
s

"""Q13. Create a code to count the occurrences of each element in a list and return a dictionary with elements as
keys and their counts as values
"""

l=[1,2,3,1,2,5,2,3,5,4,6,7,9,10,6,7,5,7,10]

d={}

for i in l:
    if d.get(i,-1)==-1:
        d[i]=1
    else:
        d[i]+=1

d

"""Q14.  Write a code to reverse a list in-place without using any built-in reverse functions"""

l=input().split()

l=l[::-1]
l

"""Q15. Implement a code to find and remove duplicates from a list while preserving the original order of
elements
"""

l=input().split()
s=set()
p=[]

for i in l:
  if i not in s:
    p.append(i)
    s.add(i)

p

"""Q16. Create a code to check if a given list is sorted (either in ascending or descending order) or not"""

l=[1,2,3,4,5,6,7,9,11]

x=len(l)
p=1
for i in range(1,x-1):
    if (l[i-1]>l[i]<l[i+1]) or (l[i-1]<l[i]>l[i+1]):
        p=0
        break

if p==1:
    print("Sorted")
else:
    print("Not sorted")

"""Q17. Write a code to merge two sorted lists into a single sorted list"""

l1=[1,3,5,7,9]
l2=[2,4,6,8]

l3=[]
i=0
j=0

while i<len(l1) and j<len(l2):
  if l1[i]<=l2[j]:
    l3.append(l1[i])
    i+=1
  else:
    l3.append(l2[j])
    j+=1

while i<len(l1):
  l3.append(l1[i])
  i+=1

while j<len(l2):
  l3.append(l2[j])
  j+=1

print(l3)

"""Q18.  Implement a code to find the intersection of two given lists."""

l1 = [15, 9, 10, 56, 23, 78, 5, 4, 9]
l2 = [9, 4, 5, 36, 47, 26, 10, 45, 9, 87]

l=[]
for i in l1:
    if i in l2:
        l.append(i)
        l2.remove(i)

l

"""Q19. Create a code to find the union of two lists without duplicates"""

l1 = [15, 9, 10, 56, 23, 78, 5, 4, 9]
l2 = [9, 4, 5, 36, 47, 26, 10, 45, 9, 87]

s1=set(l1)
s2=set(l2)

l=list(s1 | s2)
l

"""Q20. Write a code to shuffle a given list randomly without using any built-in shuffle functions"""

l=[1,2,3,4,5,6]

x=len(l)
temp=l[0]

for i in range(x-1):
    l[i]=l[i+1]

l[x-1]=temp
print(l)

"""Q21. Write a code that takes two tuples as input and returns a new tuple containing elements that are
common to both input tuples
"""

t1=tuple(input().split())
t2=tuple(input().split())

t=tuple(set(t1) & set(t2))
print(t)

"""Q22. Create a code that prompts the user to enter two sets of integers separated by commas. Then, print the
intersection of these two sets
"""

s1=set(map(int, input("Enter the integers og set1: ").split(",")))
s2=set(map(int, input("Enter the integers og set2: ").split(",")))

print(s1 & s2)

"""Q23.  Write a code to concatenate two tuples. The function should take two tuples as input and return a new
tuple containing elements from both input tuples.
"""

def concat_tuples(t1,t2):
  return t1+t2

t1=tuple(input("Enter the elements : ").split())
t2=tuple(input("Enter the elements : ").split())

t3=concat_tuples(t1,t2)
print(t3)

"""Q24. Develop a code that prompts the user to input two sets of strings. Then, print the elements that are
present in the first set but not in the second set

"""

a=set(map(str,input().split()))
b=set(map(str,input().split()))

d=(a - b)
print(d)

"""Q25.Create a code that takes a tuple and two integers as input. The function should return a new tuple
containing elements from the original tuple within the specified range of indices
"""

def new_tuple(t,a,b):
    return tuple(t[a:b])

t=tuple(input().split())
a=int(input())
b=int(input())

x=new_tuple(t,a,b)
print(x)

"""Q26.  Write a code that prompts the user to input two sets of characters. Then, print the union of these two sets"""

s1=set(input("Enter the characters of set1 seperated by spaces : ").split())
s2=set(input("Enter the characters of set2 seperated by spaces : ").split())

# Union of two sets

print(s1 | s2)

"""Q27.  Develop a code that takes a tuple of integers as input. The function should return the maximum and
minimum values from the tuple using tuple unpacking
"""

def tup(t):
    # Unpackingg of tuple
    min_val, max_val = min(t) , max(t)
    return min_val,max_val

t=tuple(map(int,input().split()))
min_v , max_v = tup(t)

print("Minimum value is :", min_v)
print("Maximum value is :", max_v)

"""Q28.  Create a code that defines two sets of integers. Then, print the union, intersection, and difference of these
two sets
"""

s1=set(map(int, input("Enter the integers of set1 seperated by spaces : ").split()))
s2=set(map(int, input("Enter the integers of set2 seperated by spaces : ").split()))

# Union
print("Union of both the sets is:",s1 | s2)

# Intersection
print("Intersection of both the sets is:",s1 & s2)

# Diffrence
print("Diffrence of both the sets is:",s1 -s2)

"""Q29.  Write a code that takes a tuple and an element as input. The function should return the count of
occurrences of the given element in the tuple
"""

def count_value(t,c):
    return t.count(c)

t=tuple(input().split())
n=input()
print("count is:",count_value(t,n))

"""Q30. Develop a code that prompts the user to input two sets of strings. Then, print the symmetric difference of
these two sets
"""

s1=set(input("Enter the strings of set1 seperated by spaces : ").split())
s2=set(input("Enter the strings of set2 seperated by spaces : ").split())

print("Symmetric Diffrence is:", s1 ^ s2)

"""Q31. Write a code that takes a list of words as input and returns a dictionary where the keys are unique words
and the values are the frequencies of those words in the input list
"""

def words(l):
    dict={}

    for word in l:
        if word in dict:
            dict[word]+=1
        else:
            dict[word]=1

    return dict

word=list(input("Enter the list of words:").split())
d=words(word)
print(d)

"""Q32. Write a code that takes two dictionaries as input and merges them into a single dictionary. If there are
common keys, the values should be added together
"""

def merge_dict(d1,d2):
  d3=d1.copy()
  for key,value in d2.items():
    if key in d3:
      d3[key]+=value
    else:
      d3[key]=value

  return d3

d1={'a': 5, 'b': 7, 'c': 6, 'd': 88}
d2={'b': 27, 'c': 90, 'd': 5, 'e':2}

d3=merge_dict(d1,d2)
print(d3)

"""Q33. Write a code to access a value in a nested dictionary. The function should take the dictionary and a list of
keys as input, and return the corresponding value. If any of the keys do not exist in the dictionary, the
function should return None
"""

def get_value(d1,keys):
    d=d1

    for key in keys:
        if key in d:
            d=d[key]
        else:
            return None

    return d

d1={
    'a':{
        'b':{
            'c':10
        },
        'd':20
    }
}

keys=['a','b','c']
x=get_value(d1,keys)
print(x)

"""Q34. Write a code that takes a dictionary as input and returns a sorted version of it based on the values. You
can choose whether to sort in ascending or descending order
"""

def sortByVale(dict):
    d={key:value for key, value in sorted(dict.items(),key=lambda dict: dict[1])}

    return d

dict = {'apple': 1, 'mango': 2, 'orange': 3, 'pineapple': 4, 'banana': 7, 'watermelon': 8}
d=sortByVale(dict)

print(d)

"""Q35.  Write a code that inverts a dictionary, swapping keys and values. Ensure that the inverted dictionary
correctly handles cases where multiple keys have the same value by storing the keys as a list in the
inverted dictionary.
"""

def invert_dict(dict):
    d={}

    for key,value in dict.items():
        if value in d:
            d[value].append(key)
        else:
            d[value]=[key]

    return d

dict={'F': 69, 'G': 67, 'H': 23, 'A': 67, 'C': 45, 'B': 23, 'E': 12}
d=invert_dict(dict)

print(d)